import os
import random
import re
import sys
import numpy as np

DAMPING = 0.85
SAMPLES = 10000


def main():
    if len(sys.argv) != 2:
        sys.exit("Usage: python pagerank.py corpus")
    corpus = crawl(sys.argv[1])
    ranks = sample_pagerank(corpus, DAMPING, SAMPLES)
    print(f"PageRank Results from Sampling (n = {SAMPLES})")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")
    ranks = iterate_pagerank(corpus, DAMPING)
    print(f"PageRank Results from Iteration")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")


def crawl(directory):
    """
    Parse a directory of HTML pages and check for links to other pages.
    Return a dictionary where each key is a page, and values are
    a list of all other pages in the corpus that are linked to by the page.
    """
    pages = dict()

    # Extract all links from HTML files
    for filename in os.listdir(directory):
        if not filename.endswith(".html"):
            continue
        with open(os.path.join(directory, filename)) as f:
            contents = f.read()
            # Regex pattern to find web links in HTML
            links = re.findall(r"<a\s+(?:[^>]*?)href=\"([^\"]*)\"", contents)
            pages[filename] = set(links) - {filename}

    # Only include links to other pages in the corpus
    for filename in pages:
        pages[filename] = set(
            link for link in pages[filename]
            if link in pages
        )

    return pages


def transition_model(corpus, page, damping_factor):
    """
    Return a probability distribution over which page to visit next,
    given a current page.

    With probability `damping_factor`, choose a link at random
    linked to by `page`. With probability `1 - damping_factor`, choose
    a link at random chosen from all pages in the corpus.
    """
    # Create a dictionary
    prob_dist = {}
    d = damping_factor

    if corpus[page]:

        # If a markov chain between the pages in the corpus exists
        for chain in corpus:

            # The surfer chose a page at random, occurs once.
            prob_dist[chain] = (1.0 - d) / len(corpus)

            # The surfer followed a link from a page i to page p. Equal prob.
            if chain in corpus[page]:
                prob_dist[chain] += d / len(corpus)

    # Else the page has no outgoing links
    else:
        for chain in corpus:
            prob_dist = 1.0 / len(corpus)

    return prob_dist


def sample_pagerank(corpus, damping_factor, n):
    """
    Return PageRank values for each page by sampling `n` pages
    according to transition model, starting with a page at random.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """

    page_rank = {}

    # Initialize dict to be 0 (floating point)
    for key in corpus:
        page_rank = 0

    # The first sample should be generated by choosing from a page at random.
    page = random.choice(list(corpus.keys()))

    # n = no of samples from the corpus
    for i in range(1, n):
        current_dist = transition_model(corpus, page, damping_factor)
        next_page = []
        prob = []

        for key, value in current_dist.items():
            next_page.append(key)
            prob.append(value)

        page = random.choices(next_page, weights=prob)[0]
        page_rank[page] += (1 / len(corpus))

    return page_rank


def iterate_pagerank(corpus, damping_factor):
    """
    Return PageRank values for each page by iteratively updating
    PageRank values until convergence.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    page_rank = {}
    for page in corpus:
        page_rank[page] = 1.0 / len(corpus)

    repeat = True

    # for each page, determine which/how many other pages link to it
    # then, apply the PageRank formula
    # if change (new_rank, old_rank) < threshold update counter
    # if by the end of the loop, counter == N,
    # it means that the change in rank for each page in the corpus was within the threshold
    # so end the loop
    # return rank
    while True:
        count = 0

        for key in corpus:
            new = (1 - damping_factor) / len(corpus)
            sigma = 0

            for page in corpus:
                if key in corpus[page]:
                    num_links = len(corpus[page])
                    sigma = sigma + page_rank[page] / num_links

            sigma = damping_factor * sigma
            new += sigma

            if abs(page_rank[key] - new) < threshold:
                count += 1

            page_rank[key] = new

        if count == len(corpus):
            break

    return page_rank


if __name__ == "__main__":
    main()
